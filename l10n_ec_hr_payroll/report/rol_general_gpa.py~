import time
from report import report_sxw
from osv import osv
import pdb

class rol_general_gpa(report_sxw.rml_parse):
    def __init__(self, cr, uid, name, context):
        super(rol_general_gpa, self).__init__(cr, uid, name, context=context)
        self.localcontext.update({
            'time': time,
            'cr':cr,
            'uid': uid,
            'generate_dict': self.generate_dict,
        })

    def generate_dict(self, obj):
        #diccionario.values() devuelve los valores del diccionario
        #diccionario.keys() devuelve las claves o cabeceras del diccionario
        #diccionario.items() devuelve el par (clave,valor) de cada registro del diccionario
        diccionario = {}
        diccionario_totales = {}
        #La estructura de diccionario es, por ejemplo:
        #diccionario = {
        #               'id_departamento': {
        #                                   'nombre_empleado': {
        #                                                       'cedula': cedula_empleado,
        #                                                       'id_rubro': valor,
        #                                                       },
        #                                   },
        #               }
        departamentos = []
        rubros = []
        #for registro in self.browse(self.cr, self.uid, ids, context):
        if obj:
            registro=obj
            for rol_individual in registro.slip_ids:
                for rubro in rol_individual.line_ids:
                    #rubro tiene la informacion (id,secuencia,name)
                    rubros.append([rubro.salary_rule_id.id,rubro.salary_rule_id.sequence,rubro.salary_rule_id.name])
                    #departamentos tiene el par (id,name)
                    departamentos.append([rol_individual.employee_id.department_id.id,rol_individual.employee_id.department_id.name])
                    if diccionario.has_key(rol_individual.employee_id.department_id.id):
                        if diccionario[rol_individual.employee_id.department_id.id].has_key(rol_individual.employee_id.name_related):
                            if diccionario[rol_individual.employee_id.department_id.id][rol_individual.employee_id.name_related].has_key(rubro.salary_rule_id.id):
                                diccionario[rol_individual.employee_id.department_id.id][rol_individual.employee_id.name_related][rubro.salary_rule_id.id] += rubro.amount
                            else:
                                diccionario[rol_individual.employee_id.department_id.id][rol_individual.employee_id.name_related][rubro.salary_rule_id.id] = rubro.amount
                        else:
                            diccionario[rol_individual.employee_id.department_id.id][rol_individual.employee_id.name_related] = {'cedula': rol_individual.employee_id.name,
                                                                                                                      rubro.salary_rule_id.id: rubro.amount}
                    else:
                        diccionario[rol_individual.employee_id.department_id.id] = {rol_individual.employee_id.name_related: {'cedula': rol_individual.employee_id.name,
                                                                                                                   rubro.salary_rule_id.id: rubro.amount}
                                                                        }
        departamentos_clean = []
        for key in departamentos:
            if key not in departamentos_clean:
                departamentos_clean.append(key)
        rubros_clean = []
        for key in rubros:
            if key not in rubros_clean:
                rubros_clean.append(key)
        #resultado = list(resultado.values())
        #resultado.sort()
        departamentos_clean.sort(key=lambda x: x[0])
        rubros_clean.sort(key=lambda x: x[1])
        
        #creamos la variable para la escritura en el archivo xls
        writer = []
        
        cabecera = ['Empleado']
        pie = {}
        for rubro in rubros_clean:
            cabecera.append(rubro[2])
        writer.append(cabecera)
        
        for departamento in departamentos_clean:
            linea = [departamento[1]]
            writer.append(['&nbsp<br/>&nbsp'])
            writer.append(linea)
            pie = {}
            for empleado in diccionario[departamento[0]].keys():
                linea = [empleado]
                for rubro in rubros_clean:
                    if not pie.has_key(rubro[0]):
                        pie.update({rubro[0]:0.00})
                    if diccionario[departamento[0]][empleado].has_key(rubro[0]):
                        linea.append(diccionario[departamento[0]][empleado][rubro[0]])
                        pie[rubro[0]] = pie[rubro[0]] + diccionario[departamento[0]][empleado][rubro[0]]
                    else:
                        linea.append(0.00)
                writer.append(linea)
            linea = ['TOTAL']
            for rubro in rubros_clean:
                linea.append(pie[rubro[0]])
            writer.append(linea)
        return writer
            
            
      
report_sxw.report_sxw('report.rol_general_gpa',
                       'hr.payslip.run', 
                       'addons/l10n_ec_hr_payroll/report/rol_general_gpa.mako',
                       parser=rol_general_gpa,
                       header=False)



# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
