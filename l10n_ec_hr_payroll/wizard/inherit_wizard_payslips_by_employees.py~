# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2012-now Gnuthink Software Labs Co. Ltd. (<http://www.gnuthink.com>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

import time
from datetime import datetime
from dateutil import relativedelta

from osv import fields, osv
from tools.translate import _

class inherit_hr_payslip_employees(osv.osv_memory):

    _inherit ='hr.payslip.employees'
    _columns = {
        'contract_ids': fields.many2many('hr.contract', 'hr_contract_group_rel', 'payslip_id', 'contract_id', 'Contratos'),
        'otra_estructura': fields.many2one('hr.payroll.structure','Aplicar otra estructura', help='Seleccionar en el caso que desee que se aplique otra estructura de salario diferente a la del contrato del servidor')
    }
    
    def cargar_empleados(self, cr, uid, ids, contratos, empleados, context={}):
        res = []
        obj_contrato = self.pool.get('hr.contract')
        if contratos:
            for registro in contratos:
                for contrato_id in registro[2]:
                    contrato = obj_contrato.browse(cr, uid, contrato_id)
                    res.append(contrato.employee_id.id)
                
        print res
        return {'value': {'employee_ids': res}}
    
    def compute_sheet(self, cr, uid, ids, context=None):
        emp_pool = self.pool.get('hr.employee')
        obj_contrato = self.pool.get('hr.contract')
        slip_pool = self.pool.get('hr.payslip')
        run_pool = self.pool.get('hr.payslip.run')
        slip_ids = []
        if context is None:
            context = {}
        data = self.read(cr, uid, ids, context=context)[0]
        run_data = {}
        if context and context.get('active_id', False):
            run_data = run_pool.read(cr, uid, context['active_id'], ['date_start', 'date_end', 'credit_note'])
        from_date =  run_data.get('date_start', False)
        to_date = run_data.get('date_end', False)
        credit_note = run_data.get('credit_note', False)
        if not data['contract_ids']:
            raise osv.except_osv(_("Advertencia !"), _("Debe seleccionar al menos 1 empleado para elaborar el rol"))
        #for emp in emp_pool.browse(cr, uid, data['employee_ids'], context=context):
        for contrato in obj_contrato.browse(cr, uid, data['contract_ids'], context=context):
            emp = contrato.employee_id
            context.update({'contract':True})
            slip_data = slip_pool.onchange_employee_id(cr, uid, [], from_date, to_date, emp.id, contrato.id, context=context)
            encargo_ids1 = self.pool.get('hr.contract.encargo').search(cr, uid, [('contract_id','=',contrato.id),
                                                                                 ('date_start','<=',to_date),
                                                                                 ('date_stop','>=',to_date),
                                                                                 ('state','=','aprobado')])
            encargo_ids2 = self.pool.get('hr.contract.encargo').search(cr, uid, [('contract_id','=',contrato.id),
                                                                                 ('date_start','<=',to_date),
                                                                                 ('date_stop','=',False),
                                                                                 ('state','=','aprobado')])
            encargo_ids = list(set(encargo_ids1 + encargo_ids2))
            department_id = contrato.department_id.id
            job_id = contrato.job_id.id
            if encargo_ids:
                for encargo in self.pool.get('hr.contract.encargo').browse(cr, uid, encargo_ids):
                    department_id = encargo.job_id.department_id.id
            res = {
                'employee_id': emp.id,
                'name': slip_data['value'].get('name', False),
                'struct_id': contrato.struct_id.id,
                'contract_id': contrato.id,
                'payslip_run_id': context.get('active_id', False),
                'input_line_ids': [(0, 0, x) for x in slip_data['value'].get('input_line_ids', False)],
                'worked_days_line_ids': [(0, 0, x) for x in slip_data['value'].get('worked_days_line_ids', False)],
                'date_from': from_date,
                'date_to': to_date,
                'credit_note': credit_note,
                'department_id': department_id,
                'job_id': job_id,
            }
            slip_ids.append(slip_pool.create(cr, uid, res, context=context))
        if data.has_key('otra_estructura'):
            if data['otra_estructura']!=False:
                context['otra_estructura'] = data['otra_estructura']
            else:
                context['otra_estructura'] = False
        slip_pool.compute_sheet(cr, uid, slip_ids, context=context)
        return {'type': 'ir.actions.act_window_close'}

inherit_hr_payslip_employees()
